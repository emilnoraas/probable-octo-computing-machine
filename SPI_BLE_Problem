/**
 * Copyright (c) 2015 - 2019, Nordic Semiconductor ASA
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form, except as embedded into a Nordic
 *    Semiconductor ASA integrated circuit in a product or a software update for
 *    such product, must reproduce the above copyright notice, this list of
 *    conditions and the following disclaimer in the documentation and/or other
 *    materials provided with the distribution.
 *
 * 3. Neither the name of Nordic Semiconductor ASA nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * 4. This software, with or without modification, must only be used with a
 *    Nordic Semiconductor ASA integrated circuit.
 *
 * 5. Any software provided in binary form under this license must not be reverse
 *    engineered, decompiled, modified and/or disassembled.
 *
 * THIS SOFTWARE IS PROVIDED BY NORDIC SEMICONDUCTOR ASA "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
#include "nrf_drv_spi.h"
#include "app_util_platform.h"
#include "nrf_gpio.h"
#include "nrfx_gpiote.h"
#include "nrf_delay.h"
#include "boards.h"
#include "app_error.h"
#include <string.h>
#include "nrf_log.h"
#include "nrf_log_ctrl.h"
#include "nrf_log_default_backends.h"
#include "nrf_drv_spi.h"
#include "BLE_code.h"



#define SPI_INSTANCE 0/**< SPIS instance index. */
static const nrf_drv_spi_t spi = NRF_DRV_SPI_INSTANCE(SPI_INSTANCE);/**< SPIS instance. */

#define SetX 0x01
#define SetY 0x02
#define Accl 0x03
#define Angle 0x04
#define Speed 0x05

#define TestString "Nordic"

uint8_t m_tx_buf[2];
uint8_t m_rx_buf[4];
const uint8_t m_length = 4;

// Flag for setting the right angle, 1 = Set X angle, 2 = Set Y angle
int SetAngle = 0;

// Flag for responding to right command, 1 = Accelerometer, 2 = Angle, 3 = Speed
int Flag = 0;

// Buffer for message to print
char Print_msg[200];

// Flag for what device is commanding. 1 = BLE, 0 = UART
int Device = 0;

//Flag to get right values back from NRF52(1)
int SPI_Flag = 0;


static volatile bool spi_xfer_done; /**< Flag used to indicate that SPIS instance completed the transfer. */
 
 
void spi_event_handler(nrf_drv_spi_evt_t const * p_event,
                       void *                    p_context);
// Initializing SPIS
void SPI_Init(void){
	//NRF_POWER->TASKS_CONSTLAT = 1;

	bsp_board_init(BSP_INIT_LEDS);

	APP_ERROR_CHECK(NRF_LOG_INIT(NULL));
	NRF_LOG_DEFAULT_BACKENDS_INIT();


	nrf_drv_spi_config_t spi_config = NRF_DRV_SPI_DEFAULT_CONFIG;
	spi_config.ss_pin               = APP_SPIS_CS_PIN;
	spi_config.miso_pin              = APP_SPIS_MISO_PIN;
	spi_config.mosi_pin              = APP_SPIS_MOSI_PIN;
	spi_config.sck_pin               = APP_SPIS_SCK_PIN;

	APP_ERROR_CHECK(nrf_drv_spi_init(&spi, &spi_config, spi_event_handler, NULL));
	return;
}


//Sending commands over SPI
void SPIS(const char data[], int device, int transfer){
		int angle;
		Device = device;	
		bsp_board_led_on(BSP_LED_0);
		bsp_board_led_off(BSP_BOARD_LED_1);
	
	if (transfer == 1){
	// Setting X angle
//		if (SetAngle == 1){

//			angle = atoi(data);
//			if (angle > 90){
//				sprintf(Print_msg, "ERROR: Max angle of the drone is 90 Degrees\n\r");
//				m_tx_buf[0] = 0x00;
//			}
//			
//			else{
//			sprintf(Print_msg, "X angle is set to %i degrees\n\r", angle);

//			m_tx_buf[0] = SetX;
//			m_tx_buf[1] = angle;
//			}
//			
//			spi_xfer_done = false;
//			APP_ERROR_CHECK(nrf_drv_spi_transfer(&spi, m_tx_buf, m_length, m_rx_buf, m_length));
//			SetAngle = 0;
//			bsp_board_led_invert(BSP_BOARD_LED_0);
//		}
		
	// Setting Y angle		
//		else if (SetAngle == 2){
//			angle = atoi(data);
//			if (angle > 90){
//				sprintf(Print_msg, "ERROR: Max angle of the drone is 90 Degrees\n\r");
//				m_tx_buf[0] = 0x00;
//			}
//			
//			else{
//			sprintf(Print_msg, "Y angle is set to %i degrees\n\r", angle);

//			m_tx_buf[0] = SetY;
//			m_tx_buf[1] = angle;
//			}
//			
//			spi_xfer_done = false;
//			APP_ERROR_CHECK(nrf_drv_spi_transfer(&spi, m_tx_buf, m_length, m_rx_buf, m_length));
//			SetAngle = 0;
//			bsp_board_led_invert(BSP_BOARD_LED_0);
//		}
			
		
	// Asking for accelerometer data, X, Y and Z values		
		if(strstr(data, "Accl") != NULL){
			bsp_board_led_invert(BSP_BOARD_LED_0);
			m_tx_buf[0] = Accl;
			
			spi_xfer_done = false;
			APP_ERROR_CHECK(nrf_drv_spi_transfer(&spi, m_tx_buf, m_length, m_rx_buf, m_length));

			Flag = 1;
		}
	
	// Asking for angle of the drone, X and Y angle
		else if(strstr(data, "Angle") != NULL){
			bsp_board_led_invert(BSP_BOARD_LED_0);
			m_tx_buf[0] = Angle;
			spi_xfer_done = false;
			APP_ERROR_CHECK(nrf_drv_spi_transfer(&spi, m_tx_buf, m_length, m_rx_buf, m_length));
			Flag = 2;
		}
			
	// Asking for the speed of the motors, Speed of each motor in percent.
		else if(strstr(data, "Speed") != NULL){
			bsp_board_led_invert(BSP_BOARD_LED_0);
			m_tx_buf[0] = Speed;
			spi_xfer_done = false;
			APP_ERROR_CHECK(nrf_drv_spi_transfer(&spi, m_tx_buf, m_length, m_rx_buf, m_length));
			Flag = 3;

		}
		
	// Getting the wanted angle to set the drone at
		else if(strstr(data, "Set") != NULL){
			bsp_board_led_invert(BSP_BOARD_LED_1);

			
			if (strstr(data, "x") != NULL){
					if (Device == 1){
					BLE_Print("What angle do you want to set for X? \n\r");
					}
					else{
					printf("What angle do you want to set for X? \n\r");
					}
					SetAngle = 1;
			}
			else if (strstr(data, "y") != NULL){
					if (Device == 1){
					BLE_Print("What angle do you want to set for Y? \n\r");
					}
					else{
					printf("What angle do you want to set for Y? \n\r");
					}
					SetAngle = 2;
			}
			}	
			}
			else{
			// Sends another message to NRF52(1) to get back the values
				m_tx_buf[0] = 0XAA;
				spi_xfer_done = false;
				APP_ERROR_CHECK(nrf_drv_spi_transfer(&spi, m_tx_buf, m_length, m_rx_buf, m_length));
				SPI_Flag = 1;
			}
	return;	
}




// Reading from SPI
void spi_event_handler(nrf_drv_spi_evt_t const * p_event,
                       void *                    p_context)
{
    if (SPI_Flag == 1){
		spi_xfer_done = true;
		printf("Transfer completed \n\r");
		bsp_board_led_invert(BSP_BOARD_LED_0);
		
	
			// Responds with the right values to the right command
			switch (Flag)
				{		
				case 1:
					sprintf(Print_msg, "The accelerometer values are: \n\r"
														 "X-axle %i G\n\r"
														 "Y-axle %i G \n\r"
														 "Z-axle %i G \n\r", (int16_t)((m_rx_buf[1] << 8) | (m_rx_buf[0] & 0xFF)), (int8_t)m_rx_buf[2], 2);
					break;
				case 2:
					sprintf(Print_msg, "The Angle of the drone is: \n\r"
													 "X-axle %i Degrees \n\r"
													 "Y-axle %i Degrees \n\r", (int8_t)m_rx_buf[0], (int8_t)m_rx_buf[1]);
					break;
				case 3:
					sprintf(Print_msg, "The speed of the motors is : \n\r"
														"Motor 1 = %i percent \n\r"
														"Motor 2 = %i percent \n\r"
														"Motor 3 = %i percent \n\r"
														"Motor 4 = %i percent \n\r", m_rx_buf[0], m_rx_buf[1], m_rx_buf[2], m_rx_buf[3] );
				break;
			}
			Flag = 0;
			
			
			// Responds to right device
			
			//BLE
			if(Device == 1){
		//	printf("%s", Print_msg);

			BLE_Print(Print_msg);
			printf("%s", Print_msg);

			}
			//Uart
			else if(Device == 0) {
			BLE_Print(Print_msg);

			printf("%s", Print_msg);
			}
			
			//Resets message.
			memset(Print_msg, 0, 150);
			SPI_Flag = 0;
	}
		else{
			spi_xfer_done = true;
		}
}
